<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨溪BLOG</title>
  
  
  <link href="/notesblog/atom.xml" rel="self"/>
  
  <link href="https://hxl71.github.io/notesblog/"/>
  <updated>2017-09-19T08:54:10.141Z</updated>
  <id>https://hxl71.github.io/notesblog/</id>
  
  <author>
    <name>Hu Xiaolong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>testpost</title>
    <link href="https://hxl71.github.io/notesblog/2017/09/18/testpost/"/>
    <id>https://hxl71.github.io/notesblog/2017/09/18/testpost/</id>
    <published>2017-09-18T08:33:02.000Z</published>
    <updated>2017-09-19T08:54:10.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lt-table-gt-使用"><a href="#lt-table-gt-使用" class="headerlink" title="&lt;table&gt;使用"></a><code>&lt;table&gt;</code>使用</h2><table><br><br>​    <tr><br><br>​        <th>标题1</th><br><br>​        <th>标题2</th><br><br>​        <th>标题3</th><br><br>​    </tr><br><br>​    <tr><br><br>​        <td>1111</td><br><br>​        <td>1111</td><br><br>​        <td>1111</td><br><br>​    </tr><br><br>​    <tr><br><br>​        <td>2222</td><br><br>​        <td>2222</td><br><br>​        <td>2222</td><br><br>​    </tr><br><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lt-table-gt-使用&quot;&gt;&lt;a href=&quot;#lt-table-gt-使用&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;table&amp;gt;使用&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;使用&lt;/h2&gt;&lt;table&gt;&lt;br
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java多线程-基础篇</title>
    <link href="https://hxl71.github.io/notesblog/2017/09/18/thread/"/>
    <id>https://hxl71.github.io/notesblog/2017/09/18/thread/</id>
    <published>2017-09-18T06:14:36.000Z</published>
    <updated>2017-09-19T07:51:55.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在J2EE开发中很多地方都会用到线程，这样不仅可以提高执行效率，而且还可以提高资源的利用率</p></blockquote><h5 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h5><h6 id="线程的状态："><a href="#线程的状态：" class="headerlink" title="线程的状态："></a>线程的状态：</h6><ul><li>NEW  <em> 线程刚创建，尚未启动 </em></li><li>RUNNABLE <em> 线程正在运行中，在这种状态下不会发生wait、sleep的等待状态 </em></li><li>BLOCKED <em> 在多个线程有同步操作的场景 </em></li><li>WAITING <em> 线程拥有了某个锁之后，调用了他的wait方法 </em></li><li>TIMED<em>WAITING </em> 有时间限制的WAITING _</li><li>TERMINATED <em> 线程已经运行完，基本等于死了 </em></li></ul><a id="more"></a><h6 id="NEW状态："><a href="#NEW状态：" class="headerlink" title="NEW状态："></a>NEW状态：</h6><p>直接创建一个线程然后获取状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Thread t = <span class="keyword">new</span> Thread();</div><div class="line">System.out.println(t.getState());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行结果：NEW</p><h6 id="RUNNABLE-状态："><a href="#RUNNABLE-状态：" class="headerlink" title="RUNNABLE 状态："></a>RUNNABLE 状态：</h6><p>线程执行后获取状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Thread t = <span class="keyword">new</span> Thread() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++)&#123;</div><div class="line">System.out.println(i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">t.start();</div><div class="line">System.out.println(t.getState());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行结果：RUNNABLE </p><h6 id="BLOCKED状态："><a href="#BLOCKED状态：" class="headerlink" title="BLOCKED状态："></a>BLOCKED状态：</h6><p>多个线程相互等待<code>synchronized</code>时，线程会出现BLOCKED状态；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedThread</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MIN_VALUE; i++) &#123;</div><div class="line"><span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">System.out.println(i);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">Thread t1 = <span class="keyword">new</span> Thread(r);</div><div class="line">t1.setName(<span class="string">"t1"</span>);</div><div class="line">Thread t2 = <span class="keyword">new</span> Thread(r);</div><div class="line">t2.setName(<span class="string">"t2"</span>);</div><div class="line">t1.start();</div><div class="line">t2.start();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个时候一个线程RUNNABLE，另一个就是BLOCKED</p><p><img src="/notesblog/images/picture/TIM图片20170919143049.png" alt="TIM图片20170919143049"></p><p>######WAITING 状态：</p><p>这个需要用到生产者消费者模型, 当生产者生产过慢的时候, 消费者就会等待生产者的下一次notify;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingThread</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line">Thread t1 = <span class="keyword">new</span> Thread() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line"><span class="keyword">synchronized</span> (lock) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">lock.wait();</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">                      System.out.println(i++);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Thread t2 = <span class="keyword">new</span> Thread() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">System.out.println(i);</div><div class="line">&#125;</div><div class="line">lock.notifyAll();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">t1.setName(<span class="string">"t1"</span>);</div><div class="line">t2.setName(<span class="string">"t2"</span>);</div><div class="line">t1.start();</div><div class="line">t2.start();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/notesblog/images/picture/TIM截图20170919150954.png" alt="TIM截图20170919150954"></p><h6 id="TIMED-WAITING："><a href="#TIMED-WAITING：" class="headerlink" title="TIMED_WAITING："></a>TIMED_WAITING：</h6><p>在上个例子的基础上<code>wait</code>加上时间参数就OK了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    lock.wait(<span class="number">60</span>*<span class="number">1000L</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    System.out.println(i++);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/notesblog/images/picture/TIM截图20170919152041.png" alt="TIM截图20170919152041"></p><p>t1现在为<code>TIMED_WAITING (on object monitor)</code>这里括号里还可能是<code>sleeping</code>等其它情况。</p><h6 id="TERMINATED-："><a href="#TERMINATED-：" class="headerlink" title="TERMINATED ："></a>TERMINATED ：</h6><p>线程运行结束就是<code>TERMINATED</code>状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TERMINATED</span><span class="params">()</span> </span>&#123;</div><div class="line">  Thread t1 = <span class="keyword">new</span> Thread();</div><div class="line">  t1.start();</div><div class="line">  System. out.println(t1.getState());</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    Thread. sleep(<span class="number">1000L</span>);</div><div class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">  &#125;</div><div class="line">  System. out.println(t1.getState());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>执行结果：</p><p>​    RUNNABLE </p><p>​    TERMINATED</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在J2EE开发中很多地方都会用到线程，这样不仅可以提高执行效率，而且还可以提高资源的利用率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;线程基础&quot;&gt;&lt;a href=&quot;#线程基础&quot; class=&quot;headerlink&quot; title=&quot;线程基础&quot;&gt;&lt;/a&gt;线程基础&lt;/h5&gt;&lt;h6 id=&quot;线程的状态：&quot;&gt;&lt;a href=&quot;#线程的状态：&quot; class=&quot;headerlink&quot; title=&quot;线程的状态：&quot;&gt;&lt;/a&gt;线程的状态：&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;NEW  &lt;em&gt; 线程刚创建，尚未启动 &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;RUNNABLE &lt;em&gt; 线程正在运行中，在这种状态下不会发生wait、sleep的等待状态 &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;BLOCKED &lt;em&gt; 在多个线程有同步操作的场景 &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;WAITING &lt;em&gt; 线程拥有了某个锁之后，调用了他的wait方法 &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;TIMED&lt;em&gt;WAITING &lt;/em&gt; 有时间限制的WAITING _&lt;/li&gt;
&lt;li&gt;TERMINATED &lt;em&gt; 线程已经运行完，基本等于死了 &lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="https://hxl71.github.io/notesblog/categories/java/"/>
    
    
      <category term="java" scheme="https://hxl71.github.io/notesblog/tags/java/"/>
    
      <category term="多线程" scheme="https://hxl71.github.io/notesblog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hxl71.github.io/notesblog/2017/09/18/hello-world/"/>
    <id>https://hxl71.github.io/notesblog/2017/09/18/hello-world/</id>
    <published>2017-09-18T06:14:36.000Z</published>
    <updated>2017-09-18T07:01:53.626Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown编辑器Typora</title>
    <link href="https://hxl71.github.io/notesblog/2017/09/15/Typora/"/>
    <id>https://hxl71.github.io/notesblog/2017/09/15/Typora/</id>
    <published>2017-09-15T07:29:50.000Z</published>
    <updated>2017-09-19T01:20:55.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Typora"><a href="#关于Typora" class="headerlink" title="关于Typora"></a>关于Typora</h2><blockquote><p>无意中找到Typora 这个编辑器，用过之后不想在换了；这是一个功能强大的Markdown编辑器，输入即输出，还可以导出PDF文件和HTLM文件。</p></blockquote><p>[TOC]</p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>用HTML的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生<u>Underline</u>的效果</p><a id="more"></a><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li><p>使用`包裹的内容将会已代码的形式展现：</p><p>例如：<code>function()</code></p></li><li><p>输入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">例如：</div><div class="line"></div><div class="line">~~~java</div><div class="line">public class DemoClass&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(&quot;Hello World!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p></li></ul><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><p>使用两个<code>*</code>或两个<code>_</code>包裹</p><p>例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">**强调内容**</div><div class="line">__强调内容__</div></pre></td></tr></table></figure><p> 输出</p><p>​                  <strong>强调内容</strong></p><p>​                  <strong>强调内容</strong></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p><h4 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h4><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接: <a href="http://www.baidu.com/" target="_blank" rel="external">http://www.baidu.com/</a></p><h4 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h4><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p><h4 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h4><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p><hr><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><p>我们可以对某一个词语进行标注。例如</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">某些人用过了才知道[^注释]</div><div class="line">[^注释]:Somebody that I used to know.</div></pre></td></tr></table></figure><p>将产生：</p><p>某些人用过了才知道[^注释]</p><p>[^注释]: Somebody that I used to know.</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|姓名|性别|公司|薪资|</div><div class="line">|:---|:---:|:---:|---:|</div><div class="line">|马云|男|阿里巴巴|3200|</div><div class="line">|马化腾|男|腾讯|5000|</div><div class="line">|坑货|女|呵呵哒|2000|</div></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">公司</th><th style="text-align:right">薪资</th></tr></thead><tbody><tr><td style="text-align:left">马云</td><td style="text-align:center">男</td><td style="text-align:center">阿里巴巴</td><td style="text-align:right">3200</td></tr><tr><td style="text-align:left">马化腾</td><td style="text-align:center">男</td><td style="text-align:center">腾讯</td><td style="text-align:right">5000</td></tr><tr><td style="text-align:left">坑货</td><td style="text-align:center">女</td><td style="text-align:center">呵呵哒</td><td style="text-align:right">2000</td></tr></tbody></table><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- [ ] 写代码</div><div class="line">- [ ] 写代码</div><div class="line">- [ ] 写代码</div><div class="line">- [ ] 写代码</div></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox"> 写代码</li></ul><ul><li style="list-style: none"><input type="checkbox"> 写代码</li></ul><ul><li style="list-style: none"><input type="checkbox"> 写代码</li></ul><ul><li style="list-style: none"><input type="checkbox"> 写代码</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">**无序列表**</div><div class="line">* XXXXXX</div><div class="line">* XXXXXX</div><div class="line">* XXXXXXX</div></pre></td></tr></table></figure><p><strong>无序列表</strong></p><ul><li>XXXXXX</li><li>XXXXXX</li><li>XXXXXXX</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">**有序的列表**</div><div class="line"><span class="number">1.</span> 苹果</div><div class="line"><span class="number">6.</span> 香蕉</div><div class="line"><span class="number">10.</span> 我都不喜欢</div></pre></td></tr></table></figure><p><strong>有序的列表</strong></p><ol><li>苹果</li><li>香蕉</li><li>我都不喜欢</li></ol><h4 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h4><p>使用&gt;来插入块引用。例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;这是一个块引用！</div></pre></td></tr></table></figure><blockquote><p>这是一个块引用！</p></blockquote><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题。</p><p><a href="https://www.typora.io/" target="_blank" rel="external">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于Typora&quot;&gt;&lt;a href=&quot;#关于Typora&quot; class=&quot;headerlink&quot; title=&quot;关于Typora&quot;&gt;&lt;/a&gt;关于Typora&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;无意中找到Typora 这个编辑器，用过之后不想在换了；这是一个功能强大的Markdown编辑器，输入即输出，还可以导出PDF文件和HTLM文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h4 id=&quot;下划线&quot;&gt;&lt;a href=&quot;#下划线&quot; class=&quot;headerlink&quot; title=&quot;下划线&quot;&gt;&lt;/a&gt;下划线&lt;/h4&gt;&lt;p&gt;用HTML的语法&lt;code&gt;&amp;lt;u&amp;gt;Underline&amp;lt;/u&amp;gt;&lt;/code&gt;将产生&lt;u&gt;Underline&lt;/u&gt;的效果&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://hxl71.github.io/notesblog/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="editer" scheme="https://hxl71.github.io/notesblog/tags/editer/"/>
    
  </entry>
  
</feed>
